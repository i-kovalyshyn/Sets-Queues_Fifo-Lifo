Difference between Comparable and Comparator	
	
/**Comparable*-

1) Comparable provides a single sorting sequence. 
In other words, we can sort the collection on the basis of a single element such as id, name, and price.
2) Comparable affects the original class, i.e., the actual class is modified.
3) Comparable provides compareTo() method to sort elements.
4) Comparable is present in java.lang package.
5) We can sort the list elements of Comparable type by Collections.sort(List)method.

/**Comparator*-

1) The Comparator provides multiple sorting sequences. 
In other words, we can sort the collection on the basis of multiple elements such as id, name, and price etc.
2)Comparator doesn't affect the original class, i.e., the actual class is not modified.
3)Comparator provides compare() method to sort elements.
4) A Comparator is present in the java.util package.
5) We can sort the list elements of Comparator type by Collections.sort(List, Comparator) method.

/**Чому  initial capacity 11? *-
@since 1.5               
Priority queue represented as a balanced binary heap: the two  children of queue[n] are queue[2*n+1] and queue[2*(n+1)].  
The  priority queue is ordered by comparator, or by the elements'  natural ordering, 
if comparator is null: For each node n in the heap and each descendant d of n, n <= d.  
The element with the lowest value is in queue[0], assuming the queue is nonempty.  

/**Чому в PriorityQueue MAX capacity - MAX_INTEGER- 8?*-
The maximum size of array to allocate. Some VMs reserve some header words in an array.
 Attempts to allocate larger arrays may result in OutOfMemoryError: 
 Requested array size exceeds VM limit */private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;
 
 P.S. відповіді на останні два питання я скопіював з документації IDEA. Було б не погано ці питання роз'яснити бо недокінця все зрозумів.